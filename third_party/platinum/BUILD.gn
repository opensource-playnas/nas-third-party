source_set("Platinum"){
    include_dirs = [
        "Core",
        "Devices/MediaConnect",
        "Devices/MediaRenderer",
        "Devices/MediaServer",
        "Extras",
        "Platinum",
        "//nas/third_party/neptune/Core",
    ]
    
    sources = [
        "Core/PltAction.cpp",   
        "Core/PltAction.h",     
        "Core/PltArgument.cpp", 
        "Core/PltArgument.h",   
        "Core/PltConstants.cpp",
        "Core/PltConstants.h",  
        "Core/PltCtrlPoint.cpp",
        "Core/PltCtrlPoint.h",  
        "Core/PltCtrlPointTask.cpp",
        "Core/PltCtrlPointTask.h",
        "Core/PltDatagramStream.cpp",
        "Core/PltDatagramStream.h",
        "Core/PltDeviceData.cpp",
        "Core/PltDeviceData.h",
        "Core/PltDeviceHost.cpp",
        "Core/PltDeviceHost.h",
        "Core/PltEvent.cpp",
        "Core/PltEvent.h",
        "Core/PltHttp.cpp",
        "Core/PltHttp.h",
        "Core/PltHttpClientTask.cpp",
        "Core/PltHttpClientTask.h",
        "Core/PltHttpServer.cpp",
        "Core/PltHttpServer.h",
        "Core/PltHttpServerTask.cpp",
        "Core/PltHttpServerTask.h",
        "Core/PltIconsData.cpp",
        "Core/PltMimeType.cpp",
        "Core/PltMimeType.h",
        "Core/PltProtocolInfo.cpp",
        "Core/PltProtocolInfo.h",
        "Core/PltService.cpp",
        "Core/PltService.h",
        "Core/PltSsdp.cpp",
        "Core/PltSsdp.h",
        "Core/PltStateVariable.cpp",
        "Core/PltStateVariable.h",
        "Core/PltTaskManager.cpp",
        "Core/PltTaskManager.h",
        "Core/PltThreadTask.cpp",
        "Core/PltThreadTask.h",
        "Core/PltUPnP.cpp",
        "Core/PltUPnP.h",
        "Core/PltUtilities.h",

        "Devices/MediaConnect/PltMediaConnect.cpp",
        "Devices/MediaConnect/PltMediaConnect.h",
        "Devices/MediaConnect/PltXbox360.cpp",
        "Devices/MediaConnect/PltXbox360.h",
        # "Devices/MediaConnect/process_scpds.sh",
        "Devices/MediaConnect/X_MS_MediaReceiverRegistrarSCPD.cpp",
        # "Devices/MediaConnect/X_MS_MediaReceiverRegistrarSCPD.xml",

        "Devices/MediaRenderer/AVTransportSCPD.cpp",
        # "Devices/MediaRenderer/AVTransportSCPD.xml",
        # "Devices/MediaRenderer/AVTransportSCPDFull.xml",     
        "Devices/MediaRenderer/PltMediaController.cpp",      
        "Devices/MediaRenderer/PltMediaController.h",        
        "Devices/MediaRenderer/PltMediaRenderer.cpp",        
        "Devices/MediaRenderer/PltMediaRenderer.h",
        # "Devices/MediaRenderer/process_scpds.sh",
        "Devices/MediaRenderer/RdrConnectionManagerSCPD.cpp",
        # "Devices/MediaRenderer/RdrConnectionManagerSCPD.xml",
        "Devices/MediaRenderer/RenderingControlSCPD.cpp",    
        # "Devices/MediaRenderer/RenderingControlSCPD.xml",
        # "Devices/MediaRenderer/RenderingControlSCPD_Full.xml",


        "Devices/MediaServer/ConnectionManagerSCPD.cpp",
        # "Devices/MediaServer/ConnectionManagerSCPD.xml",
        "Devices/MediaServer/ContentDirectorySCPD.cpp",
        # "Devices/MediaServer/ContentDirectorySCPD.xml",
        "Devices/MediaServer/ContentDirectorywSearchSCPD.cpp",
        # "Devices/MediaServer/ContentDirectorywSearchSCPD.xml",
        "Devices/MediaServer/PltDidl.cpp",
        "Devices/MediaServer/PltDidl.h",
        "Devices/MediaServer/PltFileMediaServer.cpp",
        "Devices/MediaServer/PltFileMediaServer.h",
        "Devices/MediaServer/PltMediaBrowser.cpp",
        "Devices/MediaServer/PltMediaBrowser.h",
        "Devices/MediaServer/PltMediaCache.cpp",
        "Devices/MediaServer/PltMediaCache.h",
        "Devices/MediaServer/PltMediaItem.cpp",
        "Devices/MediaServer/PltMediaItem.h",
        "Devices/MediaServer/PltMediaServer.cpp",
        "Devices/MediaServer/PltMediaServer.h",
        "Devices/MediaServer/PltSyncMediaBrowser.cpp",
        "Devices/MediaServer/PltSyncMediaBrowser.h",
        # "Devices/MediaServer/process_scpds.sh",

        "Platinum/Platinum.h",
        "Platinum/PltVersion.h",
    ]
    deps = [
        "//nas/third_party/neptune:Neptune",
    ]
    cflags = ["-Xclang", "-fcxx-exceptions"]
    cflags += [ "-w" ]
    if (is_win) {
        libs = [ "Ws2_32.lib" ]
    }
}